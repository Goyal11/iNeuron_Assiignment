{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0e301377",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (Temp/ipykernel_23180/2819938134.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"C:\\Users\\HP\\AppData\\Local\\Temp/ipykernel_23180/2819938134.py\"\u001b[1;36m, line \u001b[1;32m3\u001b[0m\n\u001b[1;33m    The two Values of Boolean data types are:\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#Q1.\n",
    "\n",
    "The two Values of Boolean data types are:\n",
    "    1. True\n",
    "    2. False.\n",
    "    \n",
    "    We can write them as bool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c04b674c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2.\n",
    "The Three types of Boolean operators are:\n",
    "    1. and\n",
    "    2. or\n",
    "    3. not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06cf7e34",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3.\n",
    "\n",
    "The List of each boolean operator are:\n",
    "    1. True and True = True\n",
    "    2. True and False = False\n",
    "    3. False and True = False\n",
    "    4. False and False = False\n",
    "    5. True or True = True\n",
    "    6. True or False = True\n",
    "    7. False or True = True\n",
    "    8. False or False = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f916f09e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4.\n",
    "\n",
    "1. (5 > 4) and (3 == 5)   .....False\n",
    "2.not (5 > 4) ..... False\n",
    "3.(5 > 4) or (3 == 5).....True\n",
    "4.not ((5 > 4) or (3 == 5)).....False\n",
    "5. (True and True) and (True == False).....False\n",
    "6. (not False) or (not True).....True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "168343c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5. \n",
    "\n",
    "The Six Comparison operators are:\n",
    "    1. ==\n",
    "    2. !=\n",
    "    3. >=\n",
    "    4. <=\n",
    "    5. >\n",
    "    6. <"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf01937c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q6. \n",
    "\n",
    "= will Assign the values to the variable and reserve it space in the memory.\n",
    "\n",
    " Whereas \n",
    "\n",
    "    == will check whether the value of one variable(operant) is equal to other variable(operant) or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ab6fa47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q7.\n",
    "\n",
    "The Three blocks in the code are :\n",
    "    1. if\n",
    "    2. elif\n",
    "    3. else\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf0286f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q8.\n",
    "\n",
    "spam = int(input(\"Enter the Value : \"))\n",
    "\n",
    "if spam == 1:\n",
    "    print('Hello')\n",
    "elif spam == 2:\n",
    "    print('Howdy')\n",
    "else :\n",
    "    print('Greetings!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f75873a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q9.\n",
    "\n",
    "If our Programme stuck in the endless loop , we will have to press Ctrl + C to kill the programme Where C stands for Cancel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f327aff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q10.\n",
    "\n",
    "break ..... By using break we can came out of a loop, without further checking the condition in a loop.\n",
    "\n",
    "continue .... By using continue we can keep on checking the condition in a loop, until the loop end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dd06db70",
   "metadata": {},
   "outputs": [],
   "source": [
    "#11.\n",
    "\n",
    "There is no difference between range(10), range(0,10) and range(0,10,1) in for loop . All will gave the same output.\n",
    "All will gave the same output and print a numbers from 0 to 9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ac86b51a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "#12.\n",
    "\n",
    "# Using for loop:\n",
    "\n",
    "for i in range(1,11):\n",
    "    print(i)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d661a733",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "#12.\n",
    "\n",
    "# Using while loop :\n",
    "\n",
    "i = 1\n",
    "\n",
    "while i<11:\n",
    "    print(i)\n",
    "    i = i+1\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae1f50a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#13.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
