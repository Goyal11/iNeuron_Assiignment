{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e5d0b55",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1.\n",
    "\n",
    "Functions are used so that we use a same logic again and again  by calling a Function Name without writing \n",
    "a code again and again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de59783b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2.\n",
    "\n",
    "Code in a function run only when we call a function name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d41e175b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3. \n",
    "def functionName() creates a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe64b7b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4.\n",
    "    Function can hold only the defination(logic) of the function.\n",
    "    \n",
    "    Whereas\n",
    "    \n",
    "    Function call only needs an argument and trigger a function to run."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81c0fea7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5.\n",
    "\n",
    "We have to create one global or one local Variable while Function is called.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e9b87a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q6.\n",
    "\n",
    "When function call return , the local scope are destroyed and all the variables are terminated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06366e5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q7.\n",
    "\n",
    "return will give the value after execution of logic define in the function. Yes, we will return value in an  expression ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "368a95ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q8.\n",
    "\n",
    "If a function does not have a return , and we call a function , it will not return any value to us.\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3e45d223",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q9.\n",
    "\n",
    "We define function variable as a global variable , when we declare a variable outside a function defination and mention global and then write a variable name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1ea8f413",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q10.\n",
    "Data type of NONE is None Type.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0032225",
   "metadata": {},
   "outputs": [],
   "source": [
    "#11.\n",
    "areallyourpetsnamederic\n",
    "sentence import areallyourpetsnamederic imports a module name areallyourpetsnamederic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "736234eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#12.\n",
    "\n",
    "We will call it as a spam.bacon() ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c3fd0f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#13.\n",
    "\n",
    "If a program encounter an error we can put the program in try Clause to Save the program from Crashing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "333f5a36",
   "metadata": {},
   "outputs": [],
   "source": [
    "#14.\n",
    "\n",
    " Try Clause save the program from crashing when error occur.\n",
    " \n",
    " Program goes to expect Clause when there is an error in the program after excecution."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
